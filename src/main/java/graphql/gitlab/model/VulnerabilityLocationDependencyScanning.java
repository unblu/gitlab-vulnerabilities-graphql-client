package graphql.gitlab.model;

import java.util.Objects;

import org.eclipse.microprofile.graphql.Name;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents the location of a vulnerability found by a dependency security scan
 */
@Name("VulnerabilityLocationDependencyScanning")
public class VulnerabilityLocationDependencyScanning implements VulnerabilityLocation {

    /**
     * Blob path to the vulnerable file.
     */
    private String blobPath;

    /**
     * Path to the vulnerable file.
     */
    private String file;

    public String getBlobPath() {
        return blobPath;
    }

    public VulnerabilityLocationDependencyScanning setBlobPath(String blobPath) {
        this.blobPath = blobPath;
        return this;
    }

    public String getFile() {
        return file;
    }

    public VulnerabilityLocationDependencyScanning setFile(String file) {
        this.file = file;
        return this;
    }

    @JsonProperty("__typename")
    public String getTypename() {
        return "VulnerabilityLocationDependencyScanning";
    }

    @JsonProperty("__typename")
    public void setTypename(String type) {
        //Setter only for Jackson
        if(!"VulnerabilityLocationDependencyScanning".equals(type)) {
            throw new IllegalArgumentException("Unexpected '__typename' value: " + type);
        }
    }

    @Override
    public int hashCode() {
        return Objects.hash(blobPath, file);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        VulnerabilityLocationDependencyScanning other = (VulnerabilityLocationDependencyScanning) obj;
        return Objects.equals(blobPath, other.blobPath) && Objects.equals(file, other.file);
    }

    @Override
    public String toString() {
        return "VulnerabilityLocationDependencyScanning [blobPath=" + blobPath + ", file=" + file + "]";
    }

}
