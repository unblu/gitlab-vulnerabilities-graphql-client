package graphql.gitlab.model;

import java.util.Objects;

import org.eclipse.microprofile.graphql.Name;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents the location of a vulnerability found by a cluster image scan
 */
@Name("VulnerabilityLocationClusterImageScanning")
public class VulnerabilityLocationClusterImageScanning implements VulnerabilityLocation {

    /**
     * Name of the vulnerable container image.
     */
    private String image;

    /**
     * Kubernetes resource which uses the vulnerable container image.
     */
    private VulnerableKubernetesResource kubernetesResource;

    public String getImage() {
        return image;
    }

    public VulnerabilityLocationClusterImageScanning setImage(String image) {
        this.image = image;
        return this;
    }

    public VulnerableKubernetesResource getKubernetesResource() {
        return kubernetesResource;
    }

    public VulnerabilityLocationClusterImageScanning setKubernetesResource(VulnerableKubernetesResource kubernetesResource) {
        this.kubernetesResource = kubernetesResource;
        return this;
    }

    @JsonProperty("__typename")
    public String getTypename() {
        return "VulnerabilityLocationClusterImageScanning";
    }

    @JsonProperty("__typename")
    public void setTypename(String type) {
        //Setter only for Jackson
        if(!"VulnerabilityLocationClusterImageScanning".equals(type)) {
            throw new IllegalArgumentException("Unexpected '__typename' value: " + type);
        }
    }

    @Override
    public int hashCode() {
        return Objects.hash(image, kubernetesResource);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        VulnerabilityLocationClusterImageScanning other = (VulnerabilityLocationClusterImageScanning) obj;
        return Objects.equals(image, other.image) && Objects.equals(kubernetesResource, other.kubernetesResource);
    }

    @Override
    public String toString() {
        return "VulnerabilityLocationClusterImageScanning [image=" + image + ", kubernetesResource=" + kubernetesResource + "]";
    }

}
